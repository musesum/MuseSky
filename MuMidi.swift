//
//  MuMidi.swift
//  MuseSky
//
//  Created by warren on 9/19/20.
//  Copyright ¬© 2020 Muse. All rights reserved.
//

import Foundation
import AudioKit
import AVFoundation
import Tr3

class MuLog {
    static func print(_ icon: String,_ msg: String) {
        Swift.print(icon + msg, terminator: " ")
    }
}
class MuAudio {

    public static let shared = MuAudio()
    let engine = AudioEngine()

    public func test() {

        let oscillator = Oscillator()
        engine.output = oscillator
        do {
            try engine.start()
            oscillator.start()
            oscillator.frequency = 440
            sleep(4)
            oscillator.stop()
        }
        catch {
            print(error)
        }

    }
}

class MidiTr3 {

    var noteOnNumÀö: Tr3?
    var noteOnVeloÀö: Tr3?
    var noteOnChanÀö: Tr3?
    var noteOnPortÀö: Tr3?
    var noteOnTimeÀö: Tr3?

    var noteOffNumÀö: Tr3?
    var noteOffVeloÀö: Tr3?
    var noteOffChanÀö: Tr3?
    var noteOffPortÀö: Tr3?
    var noteOffTimeÀö: Tr3?

    var ctrlNumÀö: Tr3?
    var ctrlValÀö: Tr3?
    var ctrlChanÀö: Tr3?
    var ctrlPortÀö: Tr3?
    var ctrlTimeÀö: Tr3?

    var afterNumÀö: Tr3?
    var afterValÀö: Tr3?
    var afterChanÀö: Tr3?
    var afterPortÀö: Tr3?
    var afterTimeÀö: Tr3?

    var pitchValÀö: Tr3?
    var pitchChanÀö: Tr3?
    var pitchPortÀö: Tr3?
    var pitchTimeÀö: Tr3?
    var programNumÀö: Tr3?
    var programChanÀö: Tr3?
    var programPortÀö: Tr3?
    var programTimeÀö: Tr3?

    public var setOptions: Tr3SetOptions = [.activate]

    init(_ root: Tr3, io: String) {
        bindTr3(root, io: io)
    }

    func bindTr3(_ root: Tr3, io: String) {

        if  let sky = root.findPath("sky"),
            let midi = sky.findPath("midi"),
            let io = midi.findPath(io), // input or output
            let note = io.findPath("note"),
            let noteOn = note.findPath("on"),
            let noteOff = note.findPath("off"),
            let ctrl = io.findPath("ctrl"),
            let after = io.findPath("after"),
            let pitch = io.findPath("pitch"),
            let program = io.findPath("program") {

            noteOnNumÀö = noteOn.findPath("num")
            noteOnVeloÀö = noteOn.findPath("velo")
            noteOnChanÀö = noteOn.findPath("chan")
            noteOnPortÀö = noteOn.findPath("port")
            noteOnTimeÀö = noteOn.findPath("time")

            noteOffNumÀö = noteOff.findPath("num")
            noteOffVeloÀö = noteOff.findPath("velo")
            noteOffChanÀö = noteOff.findPath("chan")
            noteOffPortÀö = noteOff.findPath("port")
            noteOffTimeÀö = noteOff.findPath("time")

            ctrlNumÀö = ctrl.findPath("num")
            ctrlValÀö = ctrl.findPath("val")
            ctrlChanÀö = ctrl.findPath("chan")
            ctrlPortÀö = ctrl.findPath("port")
            ctrlTimeÀö = ctrl.findPath("time")

            afterNumÀö = after.findPath("num")
            afterValÀö = after.findPath("val")
            afterChanÀö = after.findPath("chan")
            afterPortÀö = after.findPath("port")
            afterTimeÀö = after.findPath("time")

            pitchValÀö = pitch.findPath("val")
            pitchChanÀö = pitch.findPath("chan")
            pitchPortÀö = pitch.findPath("port")
            pitchTimeÀö = pitch.findPath("time")

            programNumÀö = program.findPath("num")
            programChanÀö = program.findPath("chan")
            programPortÀö = program.findPath("port")
            programTimeÀö = program.findPath("time")
        }
    }

    func noteOn(_ num: MIDINoteNumber,
                _ velo: MIDIVelocity,
                _ chan: MIDIChannel,
                _ port: MIDIUniqueID?,
                _ time: MIDITimeStamp) {

        noteOnNumÀö?.setVal(Int(num), setOptions)
        noteOnVeloÀö?.setVal(Int(velo), setOptions)
        noteOnChanÀö?.setVal(Int(chan), setOptions)
        noteOnPortÀö?.setVal(port ?? 0, setOptions)
        noteOnTimeÀö?.setVal(time, setOptions)
    }

    func noteOff(_ num: MIDINoteNumber,
                 _ velo: MIDIVelocity,
                 _ chan: MIDIChannel,
                 _ port: MIDIUniqueID?,
                 _ time: MIDITimeStamp) {

        noteOffNumÀö?.setVal(Int(num), setOptions)
        noteOffVeloÀö?.setVal(Int(velo), setOptions)
        noteOffChanÀö?.setVal(Int(chan), setOptions)
        noteOffPortÀö?.setVal(port ?? 0, setOptions)
        noteOffTimeÀö?.setVal(time, setOptions)
    }

    func controller(_ ctrl: MIDIByte,
                    _ val: MIDIVelocity,
                    _ chan: MIDIChannel,
                    _ port: MIDIUniqueID?,
                    _ time: MIDITimeStamp) {

        ctrlNumÀö?.setVal(Int(ctrl), setOptions)
        ctrlValÀö?.setVal(Int(val), setOptions)
        ctrlChanÀö?.setVal(Int(chan), setOptions)
        ctrlPortÀö?.setVal(port ?? 0, setOptions)
        ctrlTimeÀö?.setVal(time, setOptions)
    }

    func aftertouch(_ num: MIDINoteNumber,
                    _ val: MIDIByte,
                    _ chan: MIDIChannel,
                    _ port: MIDIUniqueID?,
                    _ time: MIDITimeStamp) {

        afterNumÀö?.setVal(Int(num), setOptions)
        afterValÀö?.setVal(Int(chan), setOptions)
        afterChanÀö?.setVal(Int(chan), setOptions)
        afterPortÀö?.setVal(port ?? 0, setOptions)
        afterTimeÀö?.setVal(time, setOptions)
    }

    func aftertouch(_ val: MIDIByte,
                    _ chan: MIDIChannel,
                    _ port: MIDIUniqueID?,
                    _ time: MIDITimeStamp) {

        afterNumÀö?.setVal(Int(0), setOptions)
        afterValÀö?.setVal(Int(val), setOptions)
        afterChanÀö?.setVal(Int(chan), setOptions)
        afterPortÀö?.setVal(port ?? 0, setOptions)
        afterTimeÀö?.setVal(time, setOptions)
    }

    func pitchWheel(_ val: MIDIWord,
                    _ chan: MIDIChannel,
                    _ port: MIDIUniqueID?,
                    _ time: MIDITimeStamp) {

        pitchValÀö?.setVal(Int(val), setOptions)
        pitchChanÀö?.setVal(Int(chan), setOptions)
        pitchPortÀö?.setVal(port ?? 0, setOptions)
        pitchTimeÀö?.setVal(time, setOptions)
    }

    func programChange(_ num: MIDIByte,
                       _ chan: MIDIChannel,
                       _ port: MIDIUniqueID?,
                       _ time: MIDITimeStamp) {

        programNumÀö?.setVal(Int(num), setOptions)
        programChanÀö?.setVal(Int(chan), setOptions)
        programPortÀö?.setVal(port ?? 0, setOptions)
        programTimeÀö?.setVal(time, setOptions)
    }
}

class MuMidiListener: MIDIListener {

    var receive: MidiTr3!

    init(_ root: Tr3) {
        receive = MidiTr3(root, io: "input")
    }

    func note(_ note: MIDINoteNumber, _ velocity: MIDIVelocity) -> String {
        let names = ["C", "D‚ô≠", "D", "E‚ô≠", "E", "F", "G‚ô≠", "G", "A‚ô≠", "A", "B‚ô≠", "B"]
        let octave = Int(note / 12)
        let note = Int(note % 12)
        let name = names[note]
        return "\(name)\(octave):\(velocity)"
    }

    func receivedMIDINoteOn(noteNumber: MIDINoteNumber,
                            velocity: MIDIVelocity,
                            channel: MIDIChannel,
                            portID: MIDIUniqueID?,
                            offset: MIDITimeStamp) {

        MuLog.print("‚ô™", note(noteNumber, velocity))
        receive.noteOn(noteNumber, velocity, channel, portID, offset)
    }

    func receivedMIDINoteOff(noteNumber: MIDINoteNumber,
                             velocity: MIDIVelocity,
                             channel: MIDIChannel,
                             portID: MIDIUniqueID?,
                             offset: MIDITimeStamp) {

        MuLog.print("‚àÖ", note(noteNumber, velocity))
        receive.noteOn(noteNumber, velocity, channel, portID, offset)
    }

    func receivedMIDIController(_ controller: MIDIByte,
                                value: MIDIByte,
                                channel: MIDIChannel,
                                portID: MIDIUniqueID?,
                                offset: MIDITimeStamp) {

        MuLog.print("üéö", "\(controller):\(value)")
        receive.controller(controller, value, channel, portID, offset)
    }

    func receivedMIDIAftertouch(noteNumber: MIDINoteNumber,
                                pressure: MIDIByte,
                                channel: MIDIChannel,
                                portID: MIDIUniqueID?,
                                offset: MIDITimeStamp) {

        MuLog.print("üëÜ", note(noteNumber, pressure))
        receive.aftertouch(noteNumber, channel, portID, offset)
    }

    func receivedMIDIAftertouch(_ pressure: MIDIByte,
                                channel: MIDIChannel,
                                portID: MIDIUniqueID?,
                                offset: MIDITimeStamp) {
        MuLog.print("üëÜ", "\(channel):\(pressure)")
        receive.aftertouch(pressure, channel, portID, offset)
    }

    func receivedMIDIPitchWheel(_ pitchWheelValue: MIDIWord,
                                channel: MIDIChannel,
                                portID: MIDIUniqueID?,
                                offset: MIDITimeStamp) {
        MuLog.print("‚óØ‚Éù", "\(pitchWheelValue)")
        receive.pitchWheel(pitchWheelValue, channel, portID, offset)
    }

    func receivedMIDIProgramChange(_ program: MIDIByte,
                                   channel: MIDIChannel,
                                   portID: MIDIUniqueID?,
                                   offset: MIDITimeStamp) {
        MuLog.print("‚öôÔ∏è", "\(program)")
        receive.programChange(program, channel, portID, offset)
    }

    func receivedMIDISystemCommand(_ data: [MIDIByte],
                                   portID: MIDIUniqueID?,
                                   offset: MIDITimeStamp) {
        MuLog.print("üÜá", " \(data)\n")
    }
    
    func receivedMIDISetupChange() {
    }

    func receivedMIDIPropertyChange(propertyChangeInfo: MIDIObjectPropertyChangeNotification) {
         MuLog.print("üÖü", " \(propertyChangeInfo)\n")
    }

    func receivedMIDINotification(notification: MIDINotification) {
        MuLog.print("üÖº", " \(notification)\n")
    }
}

class MuMidi {

    public static let shared = MuMidi()

    public func test(root: Tr3 ) {
        let midi = MIDI.sharedInstance
        let listener = MuMidiListener(root)
        midi.openInput()
        midi.addListener(listener)
    }
}
